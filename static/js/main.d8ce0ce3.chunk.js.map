{"version":3,"sources":["Header.js","withSuspense.js","App.js","serviceWorker.js","index.js"],"names":["Item","Menu","withRouter","props","_useState","useState","_useState2","Object","slicedToArray","current","setCurrent","useEffect","pathname","history","location","react_default","a","createElement","menu","onClick","e","key","selectedKeys","mode","style","display","justifyContent","react_router_dom","to","icon","type","disabled","withSuspense","WrappedComponent","react","fallback","Aboutme","lazy","__webpack_require__","then","bind","Doing","Promise","all","Contact","contentContainerStyle","textAlign","paddingTop","App","Fragment","src_Header","width","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qNAGMA,EAAOC,IAAKD,KA+CHE,kBA7Cf,SAAgBC,GAAO,IAAAC,EAESC,qBAFTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEdK,EAFcH,EAAA,GAELI,EAFKJ,EAAA,GAarB,OATAK,oBAAU,WAAY,IACbC,EAAYT,EAAMU,QAAQC,SAA1BF,SACPF,EAAWE,IACV,IAODG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,QANgB,SAACC,GACnBV,EAAWU,EAAEC,MAMXC,aAAc,CAACb,GACfc,KAAK,aACLC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGlBX,EAAAC,EAAAC,cAACjB,EAAD,CAAMqB,IAAI,YACRN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,GAAG,YACVb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,gBADb,aAIFf,EAAAC,EAAAC,cAACjB,EAAD,CAAMqB,IAAI,UACRN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,GAAG,UACVb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,aADb,yBAIFf,EAAAC,EAAAC,cAACjB,EAAD,CAAMqB,IAAI,YACRN,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,GAAG,YACVb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,aADb,iBAIFf,EAAAC,EAAAC,cAACjB,EAAD,CAAMqB,IAAI,QAAQU,UAAQ,GACxBhB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,SADb,UC9BSE,MAVf,SAAsBC,GACpB,OAAO,SAAU9B,GACf,OACEY,EAAAC,EAAAC,cAACiB,EAAA,SAAD,CAAUC,SAAUpB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,aAC7Bf,EAAAC,EAAAC,cAACgB,EAAqB9B,MCFxBiC,EAAUC,eAAK,kBAAMC,EAAAlB,EAAA,GAAAmB,KAAAD,EAAAE,KAAA,aACrBC,EAAQJ,eAAK,kBAAMK,QAAAC,IAAA,CAAAL,EAAAlB,EAAA,GAAAkB,EAAAlB,EAAA,KAAAmB,KAAAD,EAAAE,KAAA,aACnBI,EAAUP,eAAK,kBAAMK,QAAAC,IAAA,CAAAL,EAAAlB,EAAA,GAAAkB,EAAAlB,EAAA,KAAAmB,KAAAD,EAAAE,KAAA,aAErBK,EAAwB,CAC5BC,UAAW,SACXC,WAAY,OACZtB,QAAS,OACTC,eAAgB,UAsBHsB,MAnBf,WACE,OACEjC,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,OAAKO,MAAOqB,GACV9B,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAAE2B,MAAO,UACnBpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWvB,EAAaI,KACrDrB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWvB,EAAaS,KACnD1B,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWvB,EAAaY,WCd/CY,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,kECZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.d8ce0ce3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Icon, Menu} from 'antd';\nimport {NavLink, withRouter} from 'react-router-dom';\nconst Item = Menu.Item;\n\nfunction Header(props) {\n\n  const [current, setCurrent] = useState();\n\n  useEffect(function () {\n    const {pathname} = props.history.location;\n    setCurrent(pathname);\n  }, []);\n\n  const handleClick = (e) => {\n    setCurrent(e.key)\n  };\n\n  return (\n    <Menu\n      onClick={handleClick}\n      selectedKeys={[current]}\n      mode=\"horizontal\"\n      style={{\n        display: 'flex',\n        justifyContent: 'center'\n      }}\n    >\n      <Item key=\"/aboutme\">\n        <NavLink to=\"/aboutme\">\n          <Icon type=\"aliwangwang\"/>Who am I\n        </NavLink>\n      </Item>\n      <Item key=\"/doing\">\n        <NavLink to=\"/doing\">\n          <Icon type=\"appstore\"/>What I've been doing\n        </NavLink>\n      </Item>\n      <Item key=\"/contact\">\n        <NavLink to=\"/contact\">\n          <Icon type=\"appstore\"/>Get in touch\n        </NavLink>\n      </Item>\n      <Item key=\"/lock\" disabled>\n        <Icon type=\"lock\"/>vip\n      </Item>\n    </Menu>\n  );\n}\n\nexport default withRouter(Header);\n","import React, {Suspense} from 'react';\nimport {Icon} from 'antd';\n\nfunction withSuspense(WrappedComponent) {\n  return function (props) {\n    return (\n      <Suspense fallback={<Icon type='loading'/>}>\n        <WrappedComponent {...props} />\n      </Suspense>\n    )\n  };\n}\n\nexport default withSuspense;\n","import React, {lazy} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Header from './Header';\nimport withSuspense from './withSuspense';\n\nconst Aboutme = lazy(() => import('./Aboutme'));\nconst Doing = lazy(() => import('./Doing'));\nconst Contact = lazy(() => import('./Contact'));\n\nconst contentContainerStyle = {\n  textAlign: 'center',\n  paddingTop: '15px',\n  display: 'flex',\n  justifyContent: 'center',\n};\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        <Header/>\n        <div style={contentContainerStyle}>\n          <div style={{ width: '400px' }}>\n            <Switch>\n              <Route exact path='/aboutme' component={withSuspense(Aboutme)}/>\n              <Route exact path='/doing' component={withSuspense(Doing)}/>\n              <Route exact path='/contact' component={withSuspense(Contact)}/>\n            </Switch>\n          </div>\n        </div>\n      </>\n    </HashRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}